scores = c()
for(i in 1:nrow(presence_df)) {
row = presence_df[i,]
# do stuff with row
count = 0
#print(row$id)
# print(i)
# print(row$d.A)
# print(row$d.A > 5)
if (row$d.A > 5) {
count = count + 1
}
if (row$d.B > 5) {
count = count + 1
}
if (row$d.C > 5) {
count = count + 1
}
if (row$d.D > 5) {
count = count + 1
}
if (row$d.E > 5) {
count = count + 1
}
if (row$d.F > 5) {
count = count + 1
}
print(count)
#presence_aov_df[i]$SUS = count
scores = c(scores, count)
print("------------------")
}
print(scores)
presence_df$SUS = scores
presence_df
#extract aov df
presence_aov_df = data.frame(id = presence_df$d.id, bedingung = presence_df$d.bedingung,sus_score = presence_df$SUS, stringsAsFactors = TRUE)
presence_aov_df = convert_as_factor(presence_aov_df, presence_df.d.id)
presence_df
presence_aov_df = data.frame(id = presence_df$d.id, bedingung = presence_df$d.bedingung, sus_score = presence_df$SUS, stringsAsFactors = TRUE)
presence_aov_df = convert_as_factor(presence_aov_df, id)
presence_aov_df = presence_aov_df %>%
arrange(bedingung)
tibble(presence_aov_df)
View(presence_aov_df)
presence_aov_df %>%
group_by(presence_df.d.bedingung) %>%
get_summary_stats(presence_df.SUS, type = "mean_sd") #to Latex
#summary statistics
presence_aov_df %>%
group_by(bedingung) %>%
get_summary_stats(sus_score, type = "mean_sd") #to Latex
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point")
presence_bxp #toLatex
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point", xlab="Fortbewegungsart", ylab="SUS-Score")
presence_bxp #toLatex
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point", xlab="Fortbewegungsart", ylab="SUS-Präsenz-Score")
presence_bxp #toLatex
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point", xlab="Fortbewegungsart", ylab="SUS Präsenz Score")
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point", xlab="Fortbewegungsart", ylab="SUS Präsenz Score")
#boxplot
presence_bxp = ggboxplot(presence_aov_df, x = "bedingung", y = "sus_score", add = "point", xlab="Fortbewegungsart", ylab="SUS Präsenz Score")
presence_bxp #toLatex
#outliers
presence_aov_df %>%
group_by(presence_df.d.bedingung) %>%
identify_outliers(presence_df.SUS) #no outliers
#outliers
presence_aov_df %>%
group_by(bedingung) %>%
identify_outliers(sus_score) #no outliers
ggqqplot(presence_aov_df, "sus_score", facet.by = "bedingung") #tolatex
presence_aov_df %>%
group_by(bedingung) %>%
shapiro_test(sus_score) #to latex, normality may not be assumed -> friedmann #tolatex
presence_fried_res = presence_aov_df %>%
friedman_test(sus_score ~ bedingung|id)
presence_fried_res #tolatex
presence_aov_df %>%
friedman_effsize(sus_score ~ bedingung|id) #tolatex
pairwise_presence = presence_aov_df %>%
wilcox_test(presence_df.SUS ~ presence_df.d.bedingung, paired=TRUE, p.adjust.method = "holm")
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni")
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
library(tidyverse)
library(ggpubr)
library(rstatix)
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni")
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni")
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
#test it thouroghly
GroupA = c(4,4,2,3,5,0,1,0,2)
GroupB = c(0,2,1,0,2,0,1,0,0)
wilcox.test(GroupA, GroubB, paired=T)
#test it thouroghly
GroupA = c(4,4,2,3,5,0,1,0,2)
GroupB = c(0,2,1,0,2,0,1,0,0)
wilcox.test(GroupA, GroupB, paired=T)
library(coin)
install.packages("coin")
library(coin)
wilcoxsign_test(GroupA ~ GroupB, distribution="exact")
#test it thouroghly
GroupA = c(4,4,2,3,5,0,1,0,2)
GroupB = c(0,1,2,0,4,0,1,0,0)
GroupC = c(0,2,1,0,2,0,1,0,0)
wilcox.test(GroupA, GroupB, paired=T)
library(coin)
wilcoxsign_test(GroupA ~ GroupB, distribution="exact")
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni", exact=T)
pairwi
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni", exact=T)
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
library(tidyverse)
library(ggpubr)
library(rstatix)
pairwise_presence = presence_aov_df %>%
wilcox_test(sus_score ~ bedingung, paired=TRUE, p.adjust.method = "bonferroni", exact=T)
pairwise_presence#tolatex very confused, how can a and b be equal, b and c be equal but a and c not???
wilcox.test(GroupA, GroupC, paired=T)
library(coin)
wilcoxsign_test(GroupA ~ GroupB, distribution="exact")
library(coin)
wilcoxsign_test(GroupA ~ GroupC, distribution="exact")
library(tidyverse)
library(ggpubr)
library(rstatix)
table = read.csv("./data.csv", stringsAsFactors = TRUE)
table
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, distance=table$distance)
dd
dd$schaetzung = sub(dd$schaetzung, ",",".")
dd$schaetzung = sub(dd$schaetzung, ",",".")
dd
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, distance=table$distance)
dd
dd$schaetzung = sub(dd$schaetzung, pattern=",",value=".")
dd
dd
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, distance=table$distance)
dd$schaetzung = sub(pattern=",",replacement=".", x=dd$schaetzung)
dd
dd$distance = sub(pattern=",",replacement=".", x=dd$distance)
dd
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, distance=table$distance)
dd$schaetzung = as.numeric(sub(pattern=",",replacement=".", x=dd$schaetzung))
dd$distance = as.numeric(sub(pattern=",",replacement=".", x=dd$distance))
tibble(dd)
table = read.csv("./data.csv", stringsAsFactors = TRUE)
table
dd$distance = as.numeric(sub(pattern=",",replacement=".", x=dd$distance))
tibble(dd)
dd
dd$nadiff = dd$schaetzung/dd$distance
dd
#without 10?
dd = subset(dd, b_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
dd
#without 10?
dd = subset(dd, vp_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
get_summary_stats(dd, nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung), nadiff, type = "mean_sd")
shapiro_test(group_by(dd,bedingung), nadiff)
presence_aov_df %>%
group_by(bedingung) %>%
shapiro_test(sus_score)
shapiro_test(group_by(dd,bedingung), nadiff)
anova_test(data = dd, dv = nadiff, wid = vp_id, within = bedingung)
anova_test(data = dd, dv = nadiff, wid = vp_id, within = bedingung)
anova_test(data = dd, dv = nadiff, wid = vp_id, within = bedingung)
shapiro_test(group_by(dd,bedingung), nadiff)#normality not violated
View(dd)
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, laenge=table$raumlaenge, distance=table$distance)
tibble(dd)
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
#without 10?
dd = subset(dd, vp_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
# A tibble: 3 × 5
#bedingung variable     n  mean    sd
#<fct>     <chr>    <dbl> <dbl> <dbl>
#  1 A         nadiff       9 0.591 0.305
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
dd = subset(dd, vp_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
dd$nadiff = dd$schaetzung/dd$distance
dd
#overall mean and sd
get_summary_stats(dd, nadiff, type = "mean_sd")
View(dd)
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, laenge=table$raumlaenge, distance=table$distance)
dd$schaetzung = as.numeric(sub(pattern=",",replacement=".", x=dd$schaetzung))
dd$distance = as.numeric(sub(pattern=",",replacement=".", x=dd$distance))
tibble(dd)
dd
#without 10?
dd = subset(dd, vp_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
#overall mean and sd
get_summary_stats(dd, nadiff, type = "mean_sd")
#A tibble: 1 × 4
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
# A tibble: 3 × 5
get_summary_stats(group_by(dd,bedingung), nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung,laenge), nadiff, type = "mean_sd")
bxp <- ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
bxp <- ggboxplot(
group_by(dd,bedingung,laenge), x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
library(tidyverse)
library(ggpubr)
library(rstatix)
bxp <- ggboxplot(
group_by(dd,bedingung,laenge), x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
get_summary_stats(group_by(dd,bedingung,laenge), nadiff, type = "mean_sd")
bxp = ggboxplot(
dd, x = bedingung, y = nadiff,
color = laenge, palette = "jco"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
dd = convert_as_factor(dd, laenge)
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco"
)
bxp
shapiro_test(group_by(dd,bedingung,laenge), nadiff)#normality not violated
# bedingung variable statistic      p
# <fct>     <chr>        <dbl>  <dbl>
#   1 A         nadiff       0.968 0.876
# 2 B         nadiff       0.947 0.658
# 3 C         nadiff       0.851 0.0758
shapiro_test(group_by(dd,bedingung,laenge), nadiff)#normality not violated
dd %>%
group_by(laenge, bedingung) %>%
identify_outliers(nadiff)
aov = anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
get_anova_table(aov)
aov = anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
aov
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", colorlab="Raumzahl des Levels"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", clab="Raumzahl des Levels"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", label="Raumzahl des Levels"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs="Raumzahl des Levels"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=c("Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", main"Raumzahl des Levels"
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", main"Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", main="Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=("Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=("Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=("Raumzahl des Levels")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=("Raumzahl des Levels", "b", "c")
)
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=("Raumzahl des Levels", "b", "c"))
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=c("Raumzahl des Levels", "b", "c"))
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", font.label=c("Raumzahl des Levels", "b", "c"))
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", label.select=c("Raumzahl des Levels", "b", "c"))
bxp
bxp = ggboxplot(
dd, x = "bedingung", y = "nadiff",
color = "laenge", palette = "jco", xlab="Fortbewegungsart", ylab="Verhältnis Schätzung / Distanz", panel.labs=c("Raumzahl des Levels"))
bxp
#overall mean and sd
get_summary_stats(dd, nadiff, type = "mean_sd")
#A tibble: 1 × 4
#variable     n  mean    sd
#<chr>    <dbl> <dbl> <dbl>
#  1 nadiff      27 0.649 0.352
ggqqplot(dd, "nadiff", ggtheme = theme_bw()) +
facet_grid(bedingung ~ laenge, labeller = "label_both")
aov = anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
aov
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
table = read.csv("./data.csv", stringsAsFactors = TRUE)
table
dd = data.frame(vp_id=table$id, bedingung=table$bedingung,schaetzung=table$schaetzung, laenge=table$raumlaenge, distance=table$distance)
dd$schaetzung = as.numeric(sub(pattern=",",replacement=".", x=dd$schaetzung))
dd$distance = as.numeric(sub(pattern=",",replacement=".", x=dd$distance))
tibble(dd)
dd
#without 10?
dd = subset(dd, vp_id!=10)
dd$nadiff = dd$schaetzung/dd$distance
dd
#overall mean and sd
get_summary_stats(dd, nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung,laenge), nadiff, type = "mean_sd")
dd = convert_as_factor(dd, laenge)
shapiro_test(group_by(dd,bedingung,laenge), nadiff)#normality not violate
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
dd = data.frame(vp_id=dd$vp_id, bedingung=dd$bedingung, laenge=table$raumlaenge, nadiff= dd$nadiff)
dd = data.frame(vp_id=dd$vp_id, bedingung=dd$bedingung, laenge=dd$laenge, nadiff= dd$nadiff)
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
dd
anova_test(
data = dd, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
ff = data.frame(vp_id=dd$vp_id, bedingung=dd$bedingung, laenge=dd$laenge, nadiff= dd$nadiff)
ff
anova_test(
data = ff, dv = nadiff, wid = vp_id,
within = c(laenge, bedingung)
)
anova_test(
data = ff, dv = nadiff, wid = vp_id,
within = laenge
)
anova_test(
data = ff, dv = nadiff, wid = vp_id,
within = bedingung
)
anova_test(
data = ff, dv = nadiff, wid = vp_id,
within = c(bedingung, lange)
)
anova_test(
data = ff, dv = nadiff, wid = vp_id,
within = c(bedingung, laenge)
)
ff
View(ff)
tibble(ff)
anova_test(nadiff ~ bedingung*laenge, data=ff)
anova_test(nadiff ~ bedingung*laenge, data=ff, wid=vp_id)
ff %>%
group_by(laenge) %>%
anova_test(dv = nadiff, wid = vp_id, within = bedingung) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
ff %>%
group_by(laenge) %>%
anova_test(nadiff ~ bedingung, wid = vp_id) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
ff %>%
group_by(bedingung) %>%
anova_test(nadiff ~ laenge, wid = vp_id) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
anova_test(nadiff ~ bedingung*laenge, data=ff, wid=vp_id)
ff %>%
group_by(laenge) %>%
anova_test(nadiff ~ bedingung, wid = vp_id) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
ff %>%
group_by(bedingung) %>%
anova_test(nadiff ~ laenge, wid = vp_id) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
anova_test(nadiff ~ bedingung*laenge, data=ff, wid=vp_id)
get_anova_table(diff_aov)
anova_test(nadiff ~ laenge, data=ff, wid=vp_id)
anova_test(nadiff ~ bedingung*laenge, data=ff, wid=vp_id)
anova_test(nadiff ~ bedingung, data=ff, wid=vp_id)
anova_test(data=ff, wid=vp_id, within=bedingung, dv=nadiff )
anova_test(data=ff, wid=vp_id, within=laenge, dv=nadiff )
anova_test(data=ff, wid=vp_id, within=laenge, dv=nadiff )
anova_test(nadiff ~ laenge, data=ff, wid=vp_id)
anova_test(data=ff, wid=vp_id, within=laenge, dv=nadiff )
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung), nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,laenge), nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung), nadiff, type = "mean_sd")
get_summary_stats(dd, nadiff, type = "mean_sd")
get_summary_stats(group_by(dd,bedingung,laenge), nadiff, type = "mean_sd")
anova_test(nadiff ~ bedingung*laenge, data=ff, wid=vp_id)

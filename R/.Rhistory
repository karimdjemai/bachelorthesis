print(mode(s))
print(abs(s-d) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
d = row[6]
diff = row[7]
print(sapply(row, mode))
print(abs(s-d) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
d = row[6]
diff = row[7]
row
print(abs(s-d) == diff)
}
apply(d, 1, test_difference)
read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
#tests the difference property
test_difference = function(row) {
s = row[5]
d = row[6]
diff = row[7]
row
print(abs(s-d) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
d = row[6]
diff = row[7]
print(row)
print(abs(s-d) == diff)
}
apply(d, 1, test_difference)
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
test_difference = function(row) {
s = row[5]
dis = row[6]
diff = row[7]
print(row)
print(abs(s-dis) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
dis = row[6]
diff = row[7]
print(mode(s))
print(abs(s-dis) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
dis = row[6]
diff = row[7]
print(s)
print(abs(s-dis) == diff)
}
apply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
dis = row[6]
diff = row[7]
print(s)
print(abs(s-dis) == diff)
}
lapply(d, 1, test_difference)
#tests the difference property
test_difference = function(row) {
s = row[5]
dis = row[6]
diff = row[7]
print(s)
print(abs(s-dis) == diff)
}
lapply(d, test_difference)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row)
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(mode(row[5]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(class(row[5]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(class(row[5,1]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(class(row[5,2]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(mode(row[5,2]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,2])
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,2])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,1])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row)
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(class(row))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,1])
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,1])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,2])
}
tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,])
}
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[5,1])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,1])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[2,1])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5)
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5] - row[1,6])
}
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
}
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
printtabs(row[1,5]))
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5] - 1)
}
tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,6])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,5])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,6])
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=distance, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(row[1,7])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]) = row[1,7])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]) == row[1,7])
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=distance, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]) == row[1,7])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]) + " is it: " + row[1,7] + "?")
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print( row[1,7])
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print( row[1,7])
print("")
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print(row[1,7])
print(abs(row[1,5] - row[1,6]) == row[1,7])
print("------------------")
}
or(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print(row[1,7])
print(class(abs(row[1,5] - row[1,6])) == class(row[1,7]))
print("------------------")
}
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print(row[1,7])
print(class(abs(row[1,5] - row[1,6])) == class(row[1,7]))
print("------------------")
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=distance, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print(row[1,7])
print(class(abs(row[1,5] - row[1,6])) == class(row[1,7]))
print(abs(row[1,5] - row[1,6]) == row[1,7])
print("------------------")
}
d = read.csv("./data.csv", stringsAsFactors = FALSE)
sapply(d, mode)
#sub , with . to make it convertible
d = transform(d, schaetzung = sub(x=schaetzung, pattern = ",", replacement="."))
d = transform(d, distance = sub(x=distance, pattern = ",", replacement="."))
d = transform(d, difference = sub(x=difference, pattern = ",", replacement="."))
d$schaetzung
d = transform(d, schaetzung = as.numeric(schaetzung))
d = transform(d, distance = as.numeric(distance))
d = transform(d, difference = as.numeric(difference))
sapply(d, mode)
#tests the difference property
for(i in 1:nrow(d)) {
row = d[i,]
# do stuff with row
print(abs(row[1,5] - row[1,6]))
print("==?")
print(row[1,7])
print(all.equal(abs(row[1,5] - row[1,6]), row[1,7]))
print("------------------")
}
View(d)
aov_df = data.frame(d$bedingung, d$difference)
View(aov_df)
aov_df %>%
group_by(bedingung) %>%
shapiro_test(difference)
shapiro_test(group_by(aov_df, bedingung), difference)
install.packages("rstatix")
install.packages("magrittr")
#aov for residual testing
aov_df = data.frame(d$bedingung, d$difference)
aov_df %>%
group_by(bedingung) %>%
shapiro_test(difference)
#aov for residual testing
aov_df = data.frame(d$bedingung, d$difference)
aov_df %>%
group_by(bedingung) %>%
shapiro_test(difference)
source("~/Desktop/Bachelorarbeit/latex/R/Main.R")
library(magrittr)
library(rstatix)
aov_df %>%
group_by(bedingung) %>%
shapiro_test(difference)
#aov for residual testing
aov_df = data.frame(d$bedingung, d$difference)
aov_df %>%
group_by(bedingung) %>%
shapiro_test(difference)
aov_df = data.frame(d$bedingung, d$difference)
View(aov_df)
aov_df %>%
group_by(d.bedingung) %>%
shapiro_test(d.difference)
ggqqplot(aov_df, "d.difference", facet.by = "d.bedingung")
install.packages("ggpubr")
install.packages("tidyverse")
library(ggpubr)
library(tidyverse)
ggqqplot(aov_df, "d.difference", facet.by = "d.bedingung")
aov_df %>%
group_by(d.bedingung) %>%
shapiro_test(d.difference)
res.aov = anova_test(data = aov_df, dv = d.difference, wid = id, within = d.bedingung)
get_anova_table(res.aov)
aov = anova_test(data = aov_df, dv = d.difference, wid = id, within = d.bedingung)
get_anova_table(aov)
aov_df = data.frame(d$bedingung, d$difference, d$id)
aov = anova_test(data = aov_df, dv = d.difference, wid = id, within = d.bedingung)
get_anova_table(aov)
#aov for residual testing
aov_df = data.frame(d$bedingung, d$difference, d$id)
aov = anova_test(data = aov_df, dv = d.difference, wid = d.id, within = d.bedingung)
get_anova_table(aov)
aov_dv_without_ten = subset(aov_dv, d.id!=10)
aov_dv_without_ten
#ohne id 10
aov_df_without_ten = subset(aov_df, d.id!=10)
aov_df_without_ten
aov = anova_test(data = aov_df_without_ten, dv = d.difference, wid = d.id, within = d.bedingung)
get_anova_table(aov)
aov = anova_test(data = aov_df, dv = d.difference, wid = d.id, within = d.bedingung)
get_anova_table(aov)
ov = anova_test(data = aov_df_without_ten, dv = d.difference, wid = d.id, within = d.bedingung)
get_anova_table(aov)
